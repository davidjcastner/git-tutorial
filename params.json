{
  "name": "Git-tutorial",
  "tagline": "Basic GitHub & Git Tutorial",
  "body": "# Lab 2 - Understanding remote and local work\r\n\r\n>**Local** refers to any work done on the machine you are working on.\r\n**Remote** refers to the repository stored on GitHub.\r\n\r\n## Commands used in this lab\r\n\r\n**git remote -v** - displays the location of the remote repository  \r\n**git fetch** - checks the remote repository and updates your .git file (hidden) about changes in the remote repository  \r\n**git pull** - pulls any commits from the remote repository to your local repository (specific to your working branch)  \r\n**git push** - pushes any local commits to the remote repository (specific to your branch)\r\n\r\n### Step One\r\n\r\nFrom lab 1 on the GitHub website, you will notice that your commit is not there. That is because all of the work that you did only occured on your local machine, and your commit need to be pushed to GitHub before they will show up remotely.\r\n\r\nFirst verify that the remote location is set to your GitHub with the `git remote -v` command. It should display the same URL that you used to clone the repository in lab 1.\r\n\r\n### Step Two\r\n\r\nNext, push the commit that you made with `git push`. After pushing, you should be able to see the new file `languages.txt` in your GitHub repository on the website.\r\n\r\n### Step Three\r\n\r\nIn order in demonstrate how to get changes from the remote repository, you will need to make a change to one of the files through the website.\r\n\r\nOpen up GitHub in your browser and go to your git-tutorial repository. Select the languages.txt file and then select the option to edit it. It will be a pencil icon in the upper right hand corner.\r\n\r\nAdd a line of text at the top of file. If you aren't creative, you can add `Look a change!` to the top of the file. After adding the text, commit the changes (green button at the bottom of the page). This makes a commit to the repository just like in lab 1, but through the web browser.\r\n\r\nYour languages.txt file should now look like this:\r\n\r\n```\r\nLook a change!\r\n\r\npython\r\njavascript\r\nc++\r\n```\r\n\r\n### Step Four\r\n\r\nIn the terminal or git shell, run the command `git status`. Notice how your machine thinks that it is still up to date.\r\n\r\nUsing the command `git fetch` will check the repository for any updates since the last you checked. If you run `git status` again, you will notice that your local machine recognizing that it is one commit behind:\r\n\r\n```\r\nOn branch master\r\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\r\n  (use \"git pull\" to update your local branch)\r\nnothing to commit, working directory clean\r\n```\r\n\r\n### Step Five\r\n\r\nIn order to get the changes from the remote repository onto your local machine, run the command `git pull`.\r\n\r\nIf you open up `languages.txt` in your text editor, you should see the line of text that you added.\r\n\r\nThe pull command actually did a merge as part of the process which will be covered in the next lab.\r\n\r\n**Lab 2 complete: Congratulations you were able to push and pull commits!**\r\n\r\nNext lab:\r\n**[Lab 3: Creating branches and merging](Lab3.md)**\r\n\r\n[Return to main page](https://github.com/davidjcastner/git-tutorial)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}